// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "LiftMechanism.h"
#include "../RobotMap.h"
#include "../Commands/LiftWithJoysticks.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

LiftMechanism::LiftMechanism() : Subsystem("LiftMechanism") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	liftMotor = RobotMap::liftMechanismLiftMotor;
	lowerLimit = RobotMap::liftMechanismLowerLimit;
	upperLimit = RobotMap::liftMechanismUpperLimit;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void LiftMechanism::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new LiftWithJoysticks());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

}

void LiftMechanism::SetSpeed(Joystick* stick) {
	// while (upperLimit->Get() & lowerLimit->Get()) {

	double dir = stick->GetThrottle();

	// check the value of dir
	// if positive then check upperLimit
	// if negative then check lower limit
	if (dir>0 && upperLimit->Get())
	{
		liftMotor->Set(dir);
	}
	else if (dir<0 && lowerLimit->Get())
	{
		liftMotor->Set(dir);
	}
	else
	{
		liftMotor->Set(0);
	}
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

void LiftMechanism::Raise() {
	while (upperLimit->Get()) {
		liftMotor -> Set(0.25);
	}
}

void LiftMechanism::Lower() {
	while (lowerLimit->Get()) {
		liftMotor -> Set(-0.25);
	}
}

void LiftMechanism::Stop() {
	liftMotor -> Set(0);
}
